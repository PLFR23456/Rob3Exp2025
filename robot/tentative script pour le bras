
Servo myservo;
myservo.attach(5);  
//dans setup () penser à avoir 2 couple echo/trig différents pcq on a 2 capteurs
const int TRIG_1 2
const int ECHO_1 3

const int TRIG_2 4
const int ECHO_2 5

dans main
  const float distanceseuil2 = 20.0;
  if(distancecm(TRIG_1, ECHO_1) < distanceseuil2 ){
    sendVelocityCommand(MOTOR_ID_LEFT, 5000);
    readMotorState(MOTOR_ID_LEFT);
    delayMicroseconds(100);
    sendVelocityCommand(MOTOR_ID_RIGHT, -5000);
    readMotorState(MOTOR_ID_RIGHT);
    delayMicroseconds(100);
  }    
  else{    
    sendVelocityCommand(MOTOR_ID_RIGHT, 0);
    sendVelocityCommand(MOTOR_ID_LEFT, 0);
    ArmCommand(MOTOR_ID_ARM);
  }

float distancecm(const int Broche_Trigger, const int Broche_Echo) { 
   pinMode(Broche_Trigger, OUTPUT);
   pinMode(Broche_Echo, INPUT);
   digitalWrite(Broche_Trigger, LOW); 
   delayMicroseconds(2); 
   digitalWrite(Broche_Trigger, HIGH); 
   delayMicroseconds(10); 
   digitalWrite(Broche_Trigger, LOW); 
   // Écoute de l'écho 
   long Duree = pulseIn(Broche_Echo, HIGH); 
   // Calcul de la distance 
   long Distance1 = Duree*0.034/2;
   delay(10); 
   return Distance1;
}


void ArmCommand(int motorID){
  const float ANGLE_MAX      = 360;    // en degrés
  const long  ANGLE_MIN      = 0;   // en degrés
  const float ANGLE_TOL      = 1.0;    // tolérance d'erreur en degrés
  const long  SPEED_CMD      = 10000;  // centi-deg/s
  const float distanceseuil = 100.0; // distance capteur à laquelle le bras va s'arreter de se lever
  float UpAngleArm ;
  const float TARGET_ANGLE_ARM = UpAngleArm - 45.0 ; // angle cible en degrés
  float error = TARGET_ANGLE_ARM - currentMotorPosDeg[2];

    // sécurité pur le bras
    if (currentAngleArm >= ANGLE_MAX || currentAngleArm <= ANGLE_MIN) {
      sendVelocityCommand(motorID, 0);
    }

    // on lève le bras jusqu'à que la pince est au dessus du totem
    if (distancecm(TRIG_1,ECHO_1) < distanceseuil) {
      sendVelocityCommand(motorID, SPEED_CMD);
    }
    // quand la pince est finalement au dessus on cherche à atteindre un angle cible
    else {
      sendVelocityCommand(motorID, 0);
      UpAngleArm = currentMotorPosDeg[2];
      delay(500);
      if (fabs(error) > ANGLE_TOL) {
        long cmd = (error > 0 ? SPEED_CMD : -SPEED_CMD);
        sendVelocityCommand(motorID, cmd);
      } else {
        return;
      } 
  }
}
