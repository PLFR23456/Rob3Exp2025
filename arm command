/*****************************************************************************/
/********** PROJET DE ROBOTIQUE, 3A - POLYTECH SORBONE - MARS 2025 ***********/
/************* AUTEURS : E. PEREGRINA, E. BARNABE & P-L. PASUTTO *************/
/*****************************************************************************/

/****************** BIBLIOTHÈQUES *********************/
// For CAN communications
#include <can-serial.h>
#include <mcp2515_can.h>
#include <mcp2515_can_dfs.h>
#include <mcp_can.h>
#include <Servo.h>
Servo myservo;
int pos = 0;
// Bus CAN
#if defined(SEEED_WIO_TERMINAL) && defined(CAN_2518FD)
  const int SPI_CS_PIN = BCM8;
  const int CAN_INT_PIN = BCM25;
#else
  const int SPI_CS_PIN = 10; //9 ou 10
  const int CAN_INT_PIN = 2;
#endif
#include "mcp2515_can.h"
mcp2515_can CAN(SPI_CS_PIN);  // Set CS pin
#define MAX_DATA_SIZE 8

// For devices communication using the SPI bus
#include <SPI.h>

// For math functions
#include <math.h>

/****************** CONSTANTES *********************/
// Capteurs
#define Echo1 3// Broche Echo du HC-SR04 sur D7
#define Trigger1 4 // Broche Trigger du HC-SR04 sur D8
#define Echo2 6 // Broche Echo du HC-SR04 sur D7
#define Trigger2 7 // Broche Trigger du HC-SR04 sur D8

// Math (pourra servir)
#define MY_PI 3.14159265359

// Loop properties
#define PERIOD_IN_MICROS 5000 // 5 ms

// Moteurs
#define NB_OF_MOTORS 3 // Global motor variables array lenght, make sure ID matchs array boundaries as they will be used as index
#define MOTOR_ID_LEFT 0x01
#define MOTOR_ID_RIGHT 0x02
#define MOTOR_ID_ARM 0x03

#define MOTOR_MAX_VEL_CMD 300000
#define MOTOR_MAX_VOLTAGE_CMD 200
#define MOTOR_ARM_MAX_POS_DEG 120.0 // À changer, butée logicielle pour le bras
#define MOTOR_ARM_MIN_POS_DEG -120.0

/****************** DECLARATION DES VARIABLES GLOBALES *********************/
// Capteurs
// Variables pour la gestion non bloquante des capteurs à ultrasons
unsigned long previousMillis = 0;
const unsigned long interval = 500;
//att
long Distance1 = 0;
long Distance2 = 0;

bool k = true;
// Moteurs
int relativeMotorPosEncoder[NB_OF_MOTORS]; // In raw encoder units
int offsetMotorPosEncoder[NB_OF_MOTORS]; // In raw encoder units
int currentNumOfMotorRevol[NB_OF_MOTORS]; // Number

double currentMotorPosDeg[NB_OF_MOTORS]; // In degrees
double previousMotorPosDeg[NB_OF_MOTORS]; // In degrees

double currentMotorVel[NB_OF_MOTORS]; // In degrees per seconds

// Général
int counterForPrinting;
int printingPeriodicity;
unsigned long current_time, old_time, initial_time;

/****************** DECLARATION DES FONCTIONS *********************/
// Capteurs
bool obstacleEnFace();
bool obstacleADroite();

// Déplacement
void deplacementAngulaire(float deg);
void deplacementLineaire(float dist);

// Saisie
void saisir();

// Moteurs
void motorON(int motorID);
void motorOFF(int motorID);
void sendVelocityCommand(int motorID, long int velocity); // This function sends a velocity command. Unit = hundredth of degree per second
void readMotorState(int motorID);
void resetMotor(int motorID);
const int boutonPin = 8;
bool robotActif = false;

void setup() {
  /****************** INITIALISATION DES VARIABLES GLOBALES *********************/
  // servo moteur
  myservo.attach(5);

  /*************** MONITEUR SERIE ***************/
  // Initialization of the serial link
  Serial.begin(115200);
  counterForPrinting = 0;
  printingPeriodicity = 100; // The variables will be sent to the serial link one out of printingPeriodicity loop runs. Every printingPeriodicity * PERIODS_IN_MICROS

  /*************** BROCHES ***************/
  // Capteurs
  pinMode(Trigger1, OUTPUT); // Broche Trigger en sortie
  pinMode(Echo1, INPUT); // Broche Echo en entree
  pinMode(Trigger2, OUTPUT); // Broche Trigger en sortie
  pinMode(Echo2, INPUT); // Broche Echo en entree

  pinMode(boutonPin, INPUT_PULLUP);  // Active la résistance de pull-up

  /*************** BUS CAN ***************/
  // Démarrage de la communication avec le bus CAN
  while (CAN.begin(CAN_500KBPS) != CAN_OK) { // Tant que le bus CAN ne reçoit rien
    Serial.println("CAN initialization failed, trying again...");
    delay(500);
  } // On sort de la boucle si au moins un moteur à envoyé des données sur le bus CAN

  /*************** MOTEURS ***************/
  // Réinitialisation du moteur
  resetMotor(MOTOR_ID_LEFT);
  resetMotor(MOTOR_ID_RIGHT);
  resetMotor(MOTOR_ID_ARM);
  /*************** MESURES ***************/
  current_time = micros();
  initial_time = current_time;
}


bool brasMonte = false;  // état du bras

void ArmCommand(int motorID) {
 
  const float ANGLE_TOL = 2.0;
  const long SPEED_CMD = 5000;
  const float distanceseuil = 50.0;
  static float UpAngleArm = 0;

  float currentAngle = currentMotorPosDeg[2];

  // Si on n'a pas encore atteint le haut du totem
  if (!brasMonte) {
    if (Distance1 < distanceseuil) {
      sendVelocityCommand(motorID, SPEED_CMD);  // Monter
    } else {
      sendVelocityCommand(motorID, 0);  // Stop
      UpAngleArm = currentAngle;
      brasMonte = true; // On ne remonte plus !
      delay(10);
    }
  }
  
  // Si le bras a déjà été levé, on incline
  if (brasMonte) {
    float TARGET_ANGLE_ARM = UpAngleArm - 20.0;
    double erreur = 100*(TARGET_ANGLE_ARM - currentAngle);
    sendVelocityCommand(motorID, erreur);
    if (fabs(currentAngle - TARGET_ANGLE_ARM) < ANGLE_TOL){
      sendVelocityCommand(motorID, erreur);
      myservo.write(160);
    }
  
    
    /*
    if (fabs(error) > ANGLE_TOL) {
      long cmd = (error > 0 ? SPEED_CMD : -SPEED_CMD);
      sendVelocityCommand(motorID, cmd);
    } else {
      sendVelocityCommand(motorID, 0); // Arrêt
    }*/
  }
}



void loop() {
  if (digitalRead(boutonPin) == LOW) {
    delay(100); // anti-rebond simple
    if (!robotActif){
    robotActif = true;
    }else{
    robotActif = false;
    }
    delay(100);
  }

  if (robotActif) {
    // Met ici ton code pour faire fonctionner le robot
    Serial.println("Robot activé !");
   
    // Exemple : allumer un moteur, démarrer des capteurs, etc.

  // Gestion de la boucle
  unsigned int sleep_time;

  // Clock
  double elapsed_time_in_s;
  old_time = current_time;
  current_time = micros();
  elapsed_time_in_s = (double)(current_time - initial_time);
  elapsed_time_in_s *= 0.000001;

  /*************** MOTEURS ***************/
  // Pour le moment c'est pour tester
  // Activation des moteurs
  double periode = 10;
  double frequence = 1/periode;
  double consigne, temps_module;
  switch(0) {

    case 0 :
      temps_module = fmod(elapsed_time_in_s, (1.0 / frequence));
      if (temps_module < periode / 2) {
        consigne = 170;
      } else {
        consigne = 100;
      }
      break;

    case 1 :
      temps_module = fmod(elapsed_time_in_s, (1.0 / frequence));
      if (temps_module < periode / 2) {
        consigne = 400*(temps_module / (periode / 2));  // Montée
      } else {
        consigne = 400*(2.0 - (temps_module / (periode / 2)));  // Descente
      }
    consigne += 400;
    break;
  }
  //double erreur = 150*(consigne - currentMotorPosDeg[2]);

  const float distanceseuil2 = 10.0;

    // Action non bloquante toutes les 3 secondes
  capteur();
  /*Serial.print("distance1 : ");
  Serial.println(Distance1);
  Serial.print(" ");
  Serial.print("distance2 : ");
  Serial.println(Distance2);*/
  
  
  Serial.print(" ");
if (Distance1 > distanceseuil2 && k) {
  sendVelocityCommand(MOTOR_ID_LEFT, 5000);
  readMotorState(MOTOR_ID_LEFT);
  delayMicroseconds(10);
  sendVelocityCommand(MOTOR_ID_RIGHT, -5000);
  readMotorState(MOTOR_ID_RIGHT);
  delayMicroseconds(10);
} else {
  // Arrêt des moteurs de déplacement
  k = false;
  sendVelocityCommand(MOTOR_ID_RIGHT, 0);
  delayMicroseconds(10);
  sendVelocityCommand(MOTOR_ID_LEFT, 0);
  delayMicroseconds(10);
  
  // Monter puis abaisser le bras
  readMotorState(MOTOR_ID_ARM);
  ArmCommand(MOTOR_ID_ARM);

}
   /* if (Distance1 < 20) {
    myservo.write(120);
  } else {
    myservo.write(20);*/


// sendVelocityCommand(MOTOR_ID_ARM, erreur);
//readMotorState(MOTOR_ID_ARM);

  /*************** CAPTEURS ***************/
  

  /*************** AFFICHAGE ***************/
  counterForPrinting++;
  if (counterForPrinting > printingPeriodicity) {  // Reset the counter and print
    counterForPrinting = 0;
    /*
    Serial.println("--- Motor 1 ---");
    Serial.print("t:");
    Serial.println(elapsed_time_in_s);
    Serial.print("currentNumOfMotorRevol[0]:");
    Serial.println(currentNumOfMotorRevol[0]);
    Serial.print("currentMotorPosDeg[0]:");
    Serial.println(currentMotorPosDeg[0]);
    Serial.print("currentMotorVel[0]:");
    Serial.println(currentMotorVel[0]);
    Serial.print("relativeMotorPosEncoder[0]:");
    Serial.println(relativeMotorPosEncoder[0]);
    Serial.print("offsetMotorPosEncoder[0]:");
    Serial.println(offsetMotorPosEncoder[0]);

    Serial.println("--- Motor 2 ---");
    Serial.print("t:");
    Serial.println(elapsed_time_in_s);
    Serial.print("currentNumOfMotorRevol[1]:");
    Serial.println(currentNumOfMotorRevol[1]);
    Serial.print("currentMotorPosDeg[1]:");
    Serial.println(currentMotorPosDeg[1]);
    Serial.print("currentMotorVel[1]:");
    Serial.println(currentMotorVel[1]);
    Serial.print("relativeMotorPosEncoder[1]:");
    Serial.println(relativeMotorPosEncoder[1]);
    Serial.print("offsetMotorPosEncoder[1]:");
    Serial.println(offsetMotorPosEncoder[1]);

    Serial.println("--- Motor 3 ---");
    Serial.print("t:");
    Serial.println(elapsed_time_in_s);
    Serial.print("currentNumOfMotorRevol[2]:");
    Serial.println(currentNumOfMotorRevol[2]);
    Serial.print("currentMotorPosDeg[2]:");
    Serial.println(currentMotorPosDeg[2]);
    Serial.print("currentMotorVel[2]:");
    Serial.println(currentMotorVel[2]);
    Serial.print("relativeMotorPosEncoder[2]:");
    Serial.println(relativeMotorPosEncoder[2]);
    Serial.print("offsetMotorPosEncoder[2]:");
    Serial.println(offsetMotorPosEncoder[2]);
    Serial.print("Distance1 Capteur");
    Serial.println(Distance1);
    Serial.print("Distance2 Capteur");
    Serial.println(Distance2);
  }*/

  // Patienter pour respecter la fréquence d'itération de la boucle
  sleep_time = PERIOD_IN_MICROS - (micros() - current_time);
  if ( (sleep_time > 0) && (sleep_time < PERIOD_IN_MICROS) ) delayMicroseconds(sleep_time); // On patiente le temps restant pour respecter la fréquence d'itération (SUPPOSE QUE LES INSTRUCTIONS SONT RÉALISABLES DURANT LA PERIODE)
  } // FIN DE LA BOUCLE PRINCIPALE
  } else {
    Serial.println("Robot désactivé !");
    sendVelocityCommand(MOTOR_ID_LEFT, 0);
    delayMicroseconds(10);
    sendVelocityCommand(MOTOR_ID_RIGHT, 0);
    delayMicroseconds(10);
    sendVelocityCommand(MOTOR_ID_ARM, 0);
    // Code d'arrêt si besoin
  }
}
/****************** IMPLEMENTATION DES FONCTIONS *********************/

void motorON(int motorID) {
  /*
  Allume le moteur identifié.

  Précondition : Le moteur doit être correctement branché.
  */
  unsigned char msg[MAX_DATA_SIZE] = {
    0x88,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
  };

  CAN.sendMsgBuf(0x140 + motorID, 0, 8, msg); // Transmets le message au buffer du bus CAN, retourne CAN_OK ou CAN_FAIL
}

void motorOFF(int motorID) {
  /*
  Éteint le moteur identifié.
  */
  unsigned char msg[MAX_DATA_SIZE] = {
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
  };

  CAN.sendMsgBuf(0x140 + motorID, 0, 8, msg); // Transmets le message au buffer du bus CAN, retourne CAN_OK ou CAN_FAIL
}

void sendVelocityCommand(int motorID, long int velocity) {
  /*
  Envoie la commande de vitesse spécifiée au moteur identifié.

  Précondition : La vitesse doit être exprimée en centième de degrés par seconde.
  */

  if (abs(velocity) > MOTOR_MAX_VEL_CMD) {
    velocity = (velocity > 0 ? MOTOR_MAX_VEL_CMD : -MOTOR_MAX_VEL_CMD);
  }

  long int local_velocity;
  local_velocity = velocity;

  unsigned char *adresse_low = (unsigned char *)(&local_velocity); // Convertit l'adresse de la vitesse en une chaine de caractère pour concorder avec la syntaxe du message à transmettre

  unsigned char msg[MAX_DATA_SIZE] = {
    0xA2,
    0x00,
    0x00,
    0x00,
    *(adresse_low), // Déréférence l'adresse (le premier caractère de la chaîne)
    *(adresse_low + 1), // 2ème caractère
    *(adresse_low + 2), // 3ème caractère
    *(adresse_low + 3) // 4ème caractère
  };

  CAN.sendMsgBuf(0x140 + motorID, 0, 8, msg); // Transmets le message au buffer du bus CAN, retourne CAN_OK ou CAN_FAIL
}

void readMotorState(int motorID) {
  /*
  Récupère l'état du moteur identifié via les mesures de l'encodeur, et met à jour la valeur des variables globales suivantes :
    currentNumOfMotorRevol : Nombre de révolutions du moteur (valeur précédente +/- 1 selon si une révolution à été observé par l'encodeur)
    currentArmMotorPosDeg : Position du moteur en degrés, calculée à partir des valeurs brutes de l'encodeur
    current[Left/Right/Arm]MotorVel : Vitesse du moteur, en degrés par secondes
    previousArmMotorPosDeg : Position actuelle, en degrés (car la position actuelle deviendra la précédente au prochain appel)
  */

  uint32_t id;
  uint8_t type;
  uint8_t len;
  byte cdata[MAX_DATA_SIZE] = {0}; // Déclare et remplit le tableau de 0, buffer utilisé pour receptionner les données
  int data2_3, data4_5, data6_7;
  int rawMotorVel;
  int absoluteMotorPosEncoder;

  // Attend de réceptionner des données
  while (CAN_MSGAVAIL != CAN.checkReceive());
  // Lis les données, len: data length, buf: data buf
  CAN.readMsgBuf(&len, cdata); // Écrit les valeurs du message transmis par le bus (données) CAN dans le buffer cdata
  id = CAN.getCanId(); // Récupère la valeur de l'ID du bus CAN depuis lequel les données sont reçues
  type = (CAN.isExtendedFrame() << 0) | (CAN.isRemoteRequest() << 1);

  if ((id - 0x140) == motorID) { // Si l'ID reçu correspond à celui du moteur
    data4_5 = cdata[4] + pow(2, 8) * cdata[5];
    rawMotorVel = (int)data4_5; // Calcul la vitesse brute
    data6_7 = cdata[6] + pow(2, 8) * cdata[7];
    absoluteMotorPosEncoder = (int)data6_7;
  }

  // Convertit la vitesse brute en degrés par secondes
  currentMotorVel[motorID - 1] = (double)rawMotorVel;

  relativeMotorPosEncoder[motorID - 1] = (double)absoluteMotorPosEncoder;

  // Déduction de la position en degré à partir de l'offset, du nombre de révolutions, et de la valeur brute en unité encodeur
  relativeMotorPosEncoder[motorID - 1] -= offsetMotorPosEncoder[motorID - 1]; // On adapte la position en fonction du décalage introduit initialement (position de départ)
  currentMotorPosDeg[motorID - 1] = 180.0 + ((double)relativeMotorPosEncoder[motorID - 1]) * (180.0 / 32768.0);  // Met à jour la variable globale

  double delta = currentMotorPosDeg[motorID - 1] - previousMotorPosDeg[motorID - 1];
  if (delta > 180.0) {
      currentNumOfMotorRevol[motorID - 1]--;
  } else if (delta < -180.0) {
      currentNumOfMotorRevol[motorID - 1]++;
  }

  // Affecte à la position précédente la valeur de la position courante pour le prochain appel
  previousMotorPosDeg[motorID - 1] = currentMotorPosDeg[motorID - 1]; // writing in the global variable for next call
}

void resetMotor(int motorID) {
  /*
  Commande l'arrêt du moteur puis son démarrage.
  */

  // Initialisation des variables moteurs
  offsetMotorPosEncoder[motorID - 1] = 0; // In raw encoder units
  currentNumOfMotorRevol[motorID - 1] = 0; // Number

  currentMotorPosDeg[motorID - 1] = 0.0; // In degrees

  // Send motor OFF then motor ON command to reset
  motorOFF(motorID);
  delay(10);
  readMotorState(motorID);
  // Attendre que l'utilisateur envoie 'S'
  //while (Serial.read() != 'S');

  motorON(motorID);
  readMotorState(motorID);
  delay(10);

  sendVelocityCommand(motorID, (long int)(0)); // Send 0
  delay(10);
  readMotorState(motorID);

  offsetMotorPosEncoder[motorID - 1] = relativeMotorPosEncoder[motorID - 1]; // L'offset correspond à la valeur initiale
  currentNumOfMotorRevol[motorID - 1] = 0; // Number
  previousMotorPosDeg[motorID - 1] = 0.0;
  sendVelocityCommand(motorID, (long int)(0));
  delay(10);
  readMotorState(motorID);

  Serial.println("End of Initialization routine.");
}

void capteur(){
  digitalWrite(Trigger1, LOW);
  delayMicroseconds(2);
  digitalWrite(Trigger1, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trigger1, LOW);

  long durationcap = pulseIn(Echo1, HIGH);
  Distance1 = durationcap * 0.034 / 2;
  digitalWrite(Trigger2, LOW);
  delayMicroseconds(2);
  digitalWrite(Trigger2, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trigger2, LOW);

  durationcap = pulseIn(Echo2, HIGH);
  Distance2 = durationcap * 0.034 / 2;
}
